# .github/workflows/ci.yml
name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  
  # Allow manual triggering
  workflow_dispatch:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check package.json format
        run: |
          echo "Validating package.json structure..."
          node -e "JSON.parse(require('fs').readFileSync('package.json', 'utf8'))"

      - name: Validate file structure
        run: |
          echo "Checking required files..."
          test -f minecraft-nbt.js
          test -f nbt-core.js
          test -f snbt-converter.js
          test -f mca-handler.js
          test -f examples.js
          test -f README.md
          test -f package.json

  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [16, 18, 20, 21]
        exclude:
          # Reduce matrix size for faster builds
          - os: windows-latest
            node-version: 16
          - os: macos-latest
            node-version: 16
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run basic tests
        run: npm test

      - name: Test examples
        run: node examples.js

      - name: Test import/export
        run: |
          node -e "
          const lib = require('./minecraft-nbt');
          console.log('✓ Main library imported');
          console.log('Available exports:', Object.keys(lib));
          console.log('✓ NBT:', typeof lib.NBT);
          console.log('✓ InventoryManager:', typeof lib.InventoryManager);
          console.log('✓ MCAFile:', typeof lib.MCAFile);
          console.log('✓ SNBTConverter:', typeof lib.SNBTConverter);
          "

      - name: Test NBT operations
        run: |
          node -e "
          const lib = require('./minecraft-nbt');
          
          // Test NBT creation
          const compound = lib.createCompound({ test: 'value', number: 42 });
          console.log('✓ Created compound:', lib.inspect(compound, 1));
          
          // Test SNBT conversion
          const snbt = lib.toSNBT(compound);
          console.log('✓ SNBT conversion:', snbt);
          
          // Test JSON conversion
          const json = lib.toJSON(compound);
          console.log('✓ JSON conversion:', json.value);
          
          console.log('✓ All basic operations working');
          "

      - name: Test inventory operations
        run: |
          node -e "
          const lib = require('./minecraft-nbt');
          const { InventoryManager } = lib;
          
          // Create sample player data
          const playerData = lib.createCompound({
            Health: 20.0,
            Inventory: [
              {
                id: 'minecraft:stone',
                Count: 64,
                Slot: 0
              }
            ]
          });
          
          // Test inventory management
          const inventory = new InventoryManager(playerData);
          const items = inventory.listItems();
          console.log('✓ Listed inventory items:', items.length);
          
          const removed = inventory.removeByItemId('minecraft:stone', 32);
          console.log('✓ Removed', removed, 'items');
          
          console.log('✓ Inventory operations working');
          "

      - name: Package validation
        run: npm pack --dry-run

  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Check for vulnerabilities
        run: |
          if npm audit --audit-level=high; then
            echo "✅ No high-severity vulnerabilities found"
          else
            echo "❌ High-severity vulnerabilities detected"
            exit 1
          fi

  performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance benchmarks
        run: |
          node -e "
          const { performanceTest } = require('./examples');
          
          console.log('Running performance benchmarks...');
          performanceTest();
          console.log('✅ Performance tests completed');
          "

      - name: Memory usage test
        run: |
          node --max-old-space-size=128 -e "
          const lib = require('./minecraft-nbt');
          
          console.log('Testing memory usage with limited heap...');
          
          // Create large NBT structure
          const largeData = lib.createCompound({
            largeArray: new Array(1000).fill(0).map((_, i) => ({ index: i, data: 'test'.repeat(10) })),
            nested: {
              level1: {
                level2: {
                  level3: 'deep data'
                }
              }
            }
          });
          
          // Test serialization
          const buffer = lib.NBT.stringify(largeData);
          console.log('✓ Serialized large structure:', buffer.length, 'bytes');
          
          // Test parsing
          const parsed = lib.NBT.parse(buffer);
          console.log('✓ Parsed large structure');
          
          console.log('✅ Memory usage test passed');
          "

  compatibility:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Test Node.js compatibility
        run: |
          echo "Testing Node.js built-in modules usage..."
          node -e "
          // Test all required Node.js modules
          const modules = ['fs', 'zlib', 'path'];
          
          modules.forEach(mod => {
            try {
              require(mod);
              console.log('✓', mod, 'module available');
            } catch (err) {
              console.error('❌', mod, 'module failed:', err.message);
              process.exit(1);
            }
          });
          
          console.log('✅ All Node.js modules compatible');
          "

      - name: Test BigInt support
        run: |
          node -e "
          if (typeof BigInt === 'undefined') {
            console.error('❌ BigInt not supported');
            process.exit(1);
          }
          
          // Test BigInt operations used in NBT
          const big = BigInt('9223372036854775807');
          console.log('✓ BigInt support:', big.toString());
          
          // Test buffer operations
          const buf = Buffer.allocUnsafe(8);
          buf.writeBigInt64BE(big, 0);
          const read = buf.readBigInt64BE(0);
          
          if (read !== big) {
            console.error('❌ BigInt buffer operations failed');
            process.exit(1);
          }
          
          console.log('✅ BigInt operations working');
          "

  # Summary job
  ci-summary:
    needs: [lint, test, security, performance, compatibility]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: CI Summary
        run: |
          echo "## CI Results Summary"
          echo "- Lint: ${{ needs.lint.result }}"
          echo "- Test: ${{ needs.test.result }}"
          echo "- Security: ${{ needs.security.result }}"
          echo "- Performance: ${{ needs.performance.result }}"
          echo "- Compatibility: ${{ needs.compatibility.result }}"
          
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.security.result }}" == "success" && 
                "${{ needs.performance.result }}" == "success" && 
                "${{ needs.compatibility.result }}" == "success" ]]; then
            echo "✅ All CI checks passed!"
          else
            echo "❌ Some CI checks failed"
            exit 1
          fi